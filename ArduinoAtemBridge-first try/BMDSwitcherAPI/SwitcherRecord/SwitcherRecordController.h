/* -LICENSE-START-
** Copyright (c) 2021 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#pragma once

#include <condition_variable>
#include <mutex>
#include <thread>

#include "com_ptr.h"
#include "SwitcherMonitor.h"
#include "SwitcherRecordAVMonitor.h"
#include "SwitcherRecordDiskMonitor.h"
#include "BMDSwitcherAPI.h"

@class SwitcherRecordAppDelegate;

static const uint32_t kInvalidDiskId = 0xffffffff;

using SwitcherRecordDiskMap = std::map<BMDSwitcherRecordDiskId, com_ptr<IBMDSwitcherRecordDisk>>;

class SwitcherRecordController
{
public:
	explicit SwitcherRecordController(SwitcherRecordAppDelegate* appDelegate);
	virtual ~SwitcherRecordController();
	
	bool	connect(CFStringRef ipAddress);
	void	disconnect();

	void	startRecording();
	void	stopRecoding();
	void	switchDisk();
	
	void	setBaseFilename(CFStringRef baseFilename);
	void	setRecordInAllCameras(bool recordInAllCameras);
	void	setIsoRecording(bool isoRecording);
	void	setDisk1WorkingSet(int diskId);
	void	setDisk2WorkingSet(int diskId);
	
	bool	supportsIsoRecording(void) { return m_supportsIsoRecording; }

private:
	SwitcherRecordAppDelegate*				m_appDelegate;

	com_ptr<IBMDSwitcherDiscovery>			m_switcherDiscovery;
	com_ptr<IBMDSwitcher>					m_switcher;
	com_ptr<IBMDSwitcherRecordAV>			m_switcherRecordAV;
	SwitcherRecordDiskMap					m_switcherRecordDisks;

	com_ptr<SwitcherMonitor>				m_switcherMonitor;
	com_ptr<SwitcherRecordAVMonitor>		m_switcherRecordAVMonitor;
	com_ptr<SwitcherRecordDiskMonitor>		m_switcherRecordDiskMonitor;
	
	std::thread								m_recordThread;
	std::condition_variable					m_conditionVariable;
	std::mutex								m_mutex;
	bool									m_stopRecording;
	
	bool									m_supportsIsoRecording;
	
	void	startRecordingThread(void);
	void	stopRecordingThread(void);
	void	displayError(const CFStringRef& error);

	// Handlers for SwitcherMonitor
	void	disconnected(void);

	// Handlers for SwitcherRecordAVMonitor
	void	updateBaseFilename(void);
	void	updateRecordInAllCameras(void);
	void	updateRecordAllISOInputs(void);
	void	updateTotalRecordingTime(void);
	void	updateTimecode(void);
	
	void	updateWorkingSet(uint32_t workingSetIndex, BMDSwitcherRecordDiskId diskId);
	
	void	addRecordDisk(com_ptr<IBMDSwitcherRecordDisk>& recordDisk);
	void	iterateDisks(void);
	
	void	addDiskWithId(BMDSwitcherRecordDiskId diskId);
	void	removeDiskWithId(BMDSwitcherRecordDiskId diskId);

	void	updateRecordState(BMDSwitcherRecordAVState state);

	// Handlers for SwitcherRecordDiskMonitor
	void	updateDiskStatus(BMDSwitcherRecordDiskId diskId);
	void	updateDiskRecordingTimeAvailable(BMDSwitcherRecordDiskId diskId);
	void	updateDiskVolumeName(BMDSwitcherRecordDiskId diskId);
};
