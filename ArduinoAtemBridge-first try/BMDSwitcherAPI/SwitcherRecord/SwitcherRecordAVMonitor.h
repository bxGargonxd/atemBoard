/* -LICENSE-START-
** Copyright (c) 2021 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#pragma once

#include "BMDSwitcherAPI.h"

#include <atomic>
#include <functional>
#include <map>
#include <mutex>

using RecordNotifyEventFunc			= std::function<void(void)>;
using WorkingSetEventFunc			= std::function<void(uint32_t, BMDSwitcherRecordDiskId)>;
using DiskAvailabilityEventFunc		= std::function<void(BMDSwitcherRecordDiskId)>;
using RecordNotifyStatusFunc		= std::function<void(BMDSwitcherRecordAVState)>;
using RecordNotifyErrorFunc			= std::function<void(CFStringRef)>;

using RecordNotifyEventFuncMap		= std::map<BMDSwitcherRecordAVEventType, RecordNotifyEventFunc>;

class SwitcherRecordAVMonitor : public IBMDSwitcherRecordAVCallback
{
public:
	explicit SwitcherRecordAVMonitor();
	virtual ~SwitcherRecordAVMonitor() = default;

	// IUnknown interface
	HRESULT	QueryInterface(REFIID iid, LPVOID *ppv) override;
	ULONG	AddRef() override;
	ULONG	Release() override;
	
	// IBMDSwitcherRecordAVCallback interface
	HRESULT	Notify(BMDSwitcherRecordAVEventType eventType) override;
	HRESULT	NotifyWorkingSetChange(uint32_t workingSetIndex, BMDSwitcherRecordDiskId diskId) override;
	HRESULT	NotifyDiskAvailability(BMDSwitcherRecordDiskAvailabilityEventType eventType,  BMDSwitcherRecordDiskId diskId) override;
	HRESULT	NotifyStatus(BMDSwitcherRecordAVState stateType, BMDSwitcherRecordAVError error) override;
	
	// Handlers for Notify callback
	void setFilenameChangedHandler(const RecordNotifyEventFunc& func) { registerNotifyHandler(bmdSwitcherRecordAVEventTypeFilenameChanged, func); }
	void setRecordInAllCamerasChangedHandler(const RecordNotifyEventFunc& func) { registerNotifyHandler(bmdSwitcherRecordAVEventTypeRecordInAllCamerasChanged, func); }
	void setTimecodeChangedHandler(const RecordNotifyEventFunc& func) { registerNotifyHandler(bmdSwitcherRecordAVEventTypeTimecodeChanged, func); }
	void setDurationChangedHandler(const RecordNotifyEventFunc& func) { registerNotifyHandler(bmdSwitcherRecordAVEventTypeDurationChanged, func); }
	void setActiveDiskIndexChangedHandler(const RecordNotifyEventFunc& func) { registerNotifyHandler(bmdSwitcherRecordAVEventTypeActiveDiskIndexChanged, func); }
	void setRecordingTimeAvailableChangedHandler(const RecordNotifyEventFunc& func) { registerNotifyHandler(bmdSwitcherRecordAVEventTypeTotalRecordingTimeAvailableChanged, func); }
	void setRecordAllISOInputsChangedHandler(const RecordNotifyEventFunc& func) { registerNotifyHandler(bmdSwitcherRecordAVEventTypeRecordAllISOInputsChanged, func); }

	// Handler for NotifyWorkingSetChange callback
	void setWorkingSetChangedHandler(const WorkingSetEventFunc& func);
	
	// Handler for NotifyDiskAvailability callback
	void setDiskAvailableHandler(const DiskAvailabilityEventFunc& func);
	void setDiskRemovedHandler(const DiskAvailabilityEventFunc& func);
	
	// Handlers for NotifyStatus callback
	void setStatusUpdatedHandler(const RecordNotifyStatusFunc& func);
	void setStatusErrorHandler(const RecordNotifyErrorFunc& func);
	
private:
	std::atomic<ULONG>				m_refCount;
	std::mutex						m_mutex;
	
	RecordNotifyEventFuncMap		m_notifyHandlerFuncMap;
	WorkingSetEventFunc				m_workingSetChangedFunc;
	DiskAvailabilityEventFunc		m_diskAvailableFunc;
	DiskAvailabilityEventFunc		m_diskRemovedFunc;
	RecordNotifyStatusFunc			m_statusUpdatedFunc;
	RecordNotifyErrorFunc			m_statusErrorFunc;

	void registerNotifyHandler(const BMDSwitcherRecordAVEventType eventType, const RecordNotifyEventFunc& func);
};
