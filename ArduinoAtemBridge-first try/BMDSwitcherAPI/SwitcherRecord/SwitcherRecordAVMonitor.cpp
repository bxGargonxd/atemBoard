/* -LICENSE-START-
** Copyright (c) 2021 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#include <map>
#include "SwitcherRecordAVMonitor.h"

// IIDs are defined in a way that prevents us from using CFEqual, so we overload the == operator
static inline bool operator== (const REFIID& iid1, const REFIID& iid2)
{
	return CFEqual(&iid1, &iid2);
}

const std::map<BMDSwitcherRecordAVError, CFStringRef> kStreamRecordErrors =
{
	{ bmdSwitcherRecordAVErrorNone,					CFSTR("No error") },
	{ bmdSwitcherRecordAVErrorNoMedia,				CFSTR("Invalid disk") },
	{ bmdSwitcherRecordAVErrorMediaFull,			CFSTR("No space available on disk") },
	{ bmdSwitcherRecordAVErrorMediaError,			CFSTR("Media error") },
	{ bmdSwitcherRecordAVErrorMediaUnformatted,		CFSTR("Disk is not formatted") },
	{ bmdSwitcherRecordAVErrorDroppingFrames,		CFSTR("Frames dropped while recording") },
	{ bmdSwitcherRecordAVErrorUnknown,				CFSTR("Unknown error") },
};

SwitcherRecordAVMonitor::SwitcherRecordAVMonitor() :
	m_refCount(1)
{
}

HRESULT SwitcherRecordAVMonitor::QueryInterface(REFIID iid, LPVOID *ppv)
{
	HRESULT result = S_OK;

	if (ppv == nullptr)
		return E_INVALIDARG;

	if (CFEqual(&iid, IUnknownUUID))
	{
		*ppv = this;
		AddRef();
	}
	else if (iid == IID_IBMDSwitcherRecordAVCallback)
	{
		*ppv = static_cast<IBMDSwitcherRecordAVCallback*>(this);
		AddRef();
	}
	else
	{
		*ppv = nullptr;
		result = E_NOINTERFACE;
	}

	return result;
}

ULONG SwitcherRecordAVMonitor::AddRef()
{
	return ++m_refCount;
}

ULONG SwitcherRecordAVMonitor::Release()
{
	ULONG newRefValue = --m_refCount;
	if (newRefValue == 0)
		delete this;

	return newRefValue;
}

HRESULT	SwitcherRecordAVMonitor::Notify(BMDSwitcherRecordAVEventType eventType)
{
	RecordNotifyEventFunc callback = nullptr;
	{
		std::lock_guard<decltype(m_mutex)> lock(m_mutex);
		auto it = m_notifyHandlerFuncMap.find(eventType);
		if (it != m_notifyHandlerFuncMap.end())
			callback = it->second;
	}
	if (callback)
		callback();
	
	return S_OK;
}

HRESULT	SwitcherRecordAVMonitor::NotifyWorkingSetChange(uint32_t workingSetIndex, BMDSwitcherRecordDiskId diskId)
{
	WorkingSetEventFunc callback = nullptr;
	{
		std::lock_guard<decltype(m_mutex)> lock(m_mutex);
		callback = m_workingSetChangedFunc;
	}
	if (callback)
		callback(workingSetIndex, diskId);
	
	return S_OK;
}

HRESULT	SwitcherRecordAVMonitor::NotifyDiskAvailability(BMDSwitcherRecordDiskAvailabilityEventType eventType,  BMDSwitcherRecordDiskId diskId)
{
	DiskAvailabilityEventFunc callback = nullptr;
	{
		std::lock_guard<decltype(m_mutex)> lock(m_mutex);
		switch (eventType)
		{
			case bmdSwitcherRecordDiskAvailabilityEventTypeAvailable:
				callback = m_diskAvailableFunc;
				break;
				
			case bmdSwitcherRecordDiskAvailabilityEventTypeRemoved:
				callback = m_diskRemovedFunc;
				break;
		}
	}
	if (callback)
		callback(diskId);
	
	return S_OK;
}

HRESULT	SwitcherRecordAVMonitor::NotifyStatus(BMDSwitcherRecordAVState stateType, BMDSwitcherRecordAVError error)
{
	if (error == bmdSwitcherRecordAVErrorNone)
	{
		RecordNotifyStatusFunc statusCallback = nullptr;
		{
			std::lock_guard<decltype(m_mutex)> lock(m_mutex);
			statusCallback = m_statusUpdatedFunc;
		}
		if (statusCallback)
			statusCallback(stateType);
	}
	else
	{
		RecordNotifyErrorFunc errorCallback = nullptr;
		{
			std::lock_guard<decltype(m_mutex)> lock(m_mutex);
			errorCallback = m_statusErrorFunc;
		}
		if (errorCallback)
		{
			auto iter = kStreamRecordErrors.find(error);
			errorCallback(iter != kStreamRecordErrors.end() ? iter->second : CFSTR("Unknown error"));
		}
	}
	
	return S_OK;
}

void SwitcherRecordAVMonitor::setWorkingSetChangedHandler(const WorkingSetEventFunc& func)
{
	std::lock_guard<decltype(m_mutex)> lock(m_mutex);
	m_workingSetChangedFunc = func;
}

void SwitcherRecordAVMonitor::setDiskAvailableHandler(const DiskAvailabilityEventFunc& func)
{
	std::lock_guard<decltype(m_mutex)> lock(m_mutex);
	m_diskAvailableFunc = func;
}

void SwitcherRecordAVMonitor::setDiskRemovedHandler(const DiskAvailabilityEventFunc& func)
{
	std::lock_guard<decltype(m_mutex)> lock(m_mutex);
	m_diskRemovedFunc = func;
}

void SwitcherRecordAVMonitor::setStatusUpdatedHandler(const RecordNotifyStatusFunc& func)
{
	std::lock_guard<decltype(m_mutex)> lock(m_mutex);
	m_statusUpdatedFunc = func;
}

void SwitcherRecordAVMonitor::setStatusErrorHandler(const RecordNotifyErrorFunc& func)
{
	std::lock_guard<decltype(m_mutex)> lock(m_mutex);
	m_statusErrorFunc = func;
}

void SwitcherRecordAVMonitor::registerNotifyHandler(const BMDSwitcherRecordAVEventType eventType, const RecordNotifyEventFunc& func)
{
	std::lock_guard<decltype(m_mutex)> lock(m_mutex);
	if (func)
		// Register callback
		m_notifyHandlerFuncMap[eventType] = func;
	else
	{
		// If func is null, unregister callback by removing entry
		auto it = m_notifyHandlerFuncMap.find(eventType);
		if (it != m_notifyHandlerFuncMap.end())
			m_notifyHandlerFuncMap.erase(it);
	}
}

