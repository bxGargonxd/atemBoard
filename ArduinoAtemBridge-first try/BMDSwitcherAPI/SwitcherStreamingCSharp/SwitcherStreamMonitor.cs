/* -LICENSE-START-
** Copyright (c) 2021 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

using System;
using BMDSwitcherAPI;

namespace SwitcherStreamingCSharp
{
	#region eventargs
	public class StatusUpdatedEventArgs : EventArgs
	{
		public StatusUpdatedEventArgs(_BMDSwitcherStreamRTMPState stateType) => StateType = stateType;
		public _BMDSwitcherStreamRTMPState StateType { get; private set; }
	}
	#endregion

	class SwitcherStreamMonitor : IBMDSwitcherStreamRTMPCallback
	{
		// Event handlers for Notify callback
		public event EventHandler ServiceNameChanged;
		public event EventHandler StreamURLChanged;
		public event EventHandler StreamKeyChanged;
		public event EventHandler VideoBitratesChanged;
		public event EventHandler AudioBitratesChanged;
		public event EventHandler EncodingBitrateChanged;
		public event EventHandler CachedUsedChanged;
		public event EventHandler TimecodeChanged;
		public event EventHandler DurationChanged;
		public event EventHandler AuthenticationChanged;
		public event EventHandler LowLatencyChanged;

		// Event handlers for NotifyStatus callback
		public event EventHandler<StatusUpdatedEventArgs> StatusUpdated;
		public event EventHandler InvalidState;
		public event EventHandler ErrorUnknown;

		public SwitcherStreamMonitor()
		{
		}

		void IBMDSwitcherStreamRTMPCallback.Notify(_BMDSwitcherStreamRTMPEventType eventType)
		{
			switch (eventType)
			{
				case _BMDSwitcherStreamRTMPEventType.bmdSwitcherStreamRTMPEventTypeServiceNameChanged:
					ServiceNameChanged?.Invoke(this, EventArgs.Empty);
					break;

				case _BMDSwitcherStreamRTMPEventType.bmdSwitcherStreamRTMPEventTypeUrlChanged:
					StreamURLChanged?.Invoke(this, EventArgs.Empty);
					break;

				case _BMDSwitcherStreamRTMPEventType.bmdSwitcherStreamRTMPEventTypeKeyChanged:
					StreamKeyChanged?.Invoke(this, EventArgs.Empty);
					break;

				case _BMDSwitcherStreamRTMPEventType.bmdSwitcherStreamRTMPEventTypeVideoBitratesChanged:
					VideoBitratesChanged?.Invoke(this, EventArgs.Empty);
					break;

				case _BMDSwitcherStreamRTMPEventType.bmdSwitcherStreamRTMPEventTypeAudioBitratesChanged:
					AudioBitratesChanged?.Invoke(this, EventArgs.Empty);
					break;

				case _BMDSwitcherStreamRTMPEventType.bmdSwitcherStreamRTMPEventTypeEncodingBitrateChanged:
					EncodingBitrateChanged?.Invoke(this, EventArgs.Empty);
					break;

				case _BMDSwitcherStreamRTMPEventType.bmdSwitcherStreamRTMPEventTypeCacheUsedChanged:
					CachedUsedChanged?.Invoke(this, EventArgs.Empty);
					break;

				case _BMDSwitcherStreamRTMPEventType.bmdSwitcherStreamRTMPEventTypeTimecodeChanged:
					TimecodeChanged?.Invoke(this, EventArgs.Empty);
					break;

				case _BMDSwitcherStreamRTMPEventType.bmdSwitcherStreamRTMPEventTypeDurationChanged:
					DurationChanged?.Invoke(this, EventArgs.Empty);
					break;

				case _BMDSwitcherStreamRTMPEventType.bmdSwitcherStreamRTMPEventTypeAuthenticationChanged:
					AuthenticationChanged?.Invoke(this, EventArgs.Empty);
					break;

				case _BMDSwitcherStreamRTMPEventType.bmdSwitcherStreamRTMPEventTypeLowLatencyChanged:
					LowLatencyChanged?.Invoke(this, EventArgs.Empty);
					break;
			}
		}

		void IBMDSwitcherStreamRTMPCallback.NotifyStatus(_BMDSwitcherStreamRTMPState stateType, _BMDSwitcherStreamRTMPError error)
		{
			switch (error)
			{
				case _BMDSwitcherStreamRTMPError.bmdSwitcherStreamRTMPErrorNone:
					StatusUpdated?.Invoke(this, new StatusUpdatedEventArgs(stateType));
					break;

				case _BMDSwitcherStreamRTMPError.bmdSwitcherStreamRTMPErrorInvalidState:
					InvalidState?.Invoke(this, EventArgs.Empty);
					break;

				case _BMDSwitcherStreamRTMPError.bmdSwitcherStreamRTMPErrorUnknown:
					ErrorUnknown?.Invoke(this, EventArgs.Empty);
					break;

				default:
					return;
			}
		}
	}

}
