/* -LICENSE-START-
** Copyright (c) 2021 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#pragma once

#include "BMDSwitcherAPI.h"

#include <atomic>
#include <functional>
#include <map>
#include <string>

using NotifyEventFunc   = std::function<void(void)>;
using NotifyStatusFunc  = std::function<void(BMDSwitcherStreamRTMPState)>;
using NotifyErrorFunc   = std::function<void(std::string)>;

class SwitcherStreamMonitor : public IBMDSwitcherStreamRTMPCallback
{
public:
	explicit SwitcherStreamMonitor();
	virtual ~SwitcherStreamMonitor() = default;

	// IUnknown interface
	HRESULT	QueryInterface(REFIID iid, LPVOID *ppv) override;
	ULONG	AddRef() override;
	ULONG	Release() override;
	
	// IBMDSwitcherStreamRTMPCallback interface
	HRESULT	Notify(BMDSwitcherStreamRTMPEventType eventType) override;
	HRESULT	NotifyStatus(BMDSwitcherStreamRTMPState stateType, BMDSwitcherStreamRTMPError error) override;

	// Handlers for Notify callback
	void onServiceNameChanged(const NotifyEventFunc& func) { registerNotifyHandler(bmdSwitcherStreamRTMPEventTypeServiceNameChanged, func); }
	void onStreamURLChanged(const NotifyEventFunc& func) { registerNotifyHandler(bmdSwitcherStreamRTMPEventTypeUrlChanged, func); }
	void onStreamKeyChanged(const NotifyEventFunc& func) { registerNotifyHandler(bmdSwitcherStreamRTMPEventTypeKeyChanged, func); }
	void onVideoBitratesChanged(const NotifyEventFunc& func) { registerNotifyHandler(bmdSwitcherStreamRTMPEventTypeVideoBitratesChanged, func); }
	void onAudioBitratesChanged(const NotifyEventFunc& func) { registerNotifyHandler(bmdSwitcherStreamRTMPEventTypeAudioBitratesChanged, func); }
	void onEncodingBitrateChanged(const NotifyEventFunc& func) { registerNotifyHandler(bmdSwitcherStreamRTMPEventTypeEncodingBitrateChanged, func); }
	void onCachedUsedChanged(const NotifyEventFunc& func) { registerNotifyHandler(bmdSwitcherStreamRTMPEventTypeCacheUsedChanged, func); }
	void onTimecodeChanged(const NotifyEventFunc& func) { registerNotifyHandler(bmdSwitcherStreamRTMPEventTypeTimecodeChanged, func); }
	void onDurationChanged(const NotifyEventFunc& func) { registerNotifyHandler(bmdSwitcherStreamRTMPEventTypeDurationChanged, func); }
	void onAuthenticationChanged(const NotifyEventFunc& func) { registerNotifyHandler(bmdSwitcherStreamRTMPEventTypeAuthenticationChanged, func); }
	void onLowLatencyChanged(const NotifyEventFunc& func) { registerNotifyHandler(bmdSwitcherStreamRTMPEventTypeLowLatencyChanged, func); }
	
	void onStatusUpdated(const NotifyStatusFunc& func) { m_statusUpdatedFunc = func; }
	void onStatusError(const NotifyErrorFunc& func) { m_statusErrorFunc = func; }

private:
	std::atomic<ULONG>												m_refCount;
	std::map<BMDSwitcherStreamRTMPEventType, NotifyEventFunc> 		m_notifyHandlerFuncMap;

	void registerNotifyHandler(const BMDSwitcherStreamRTMPEventType eventType, const NotifyEventFunc& func);
	
	// Handlers for NotifyStatus callback
	NotifyStatusFunc			m_statusUpdatedFunc;
	NotifyErrorFunc				m_statusErrorFunc;
};
